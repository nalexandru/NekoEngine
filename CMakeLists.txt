if(WIN32)
	set(CMAKE_SYSTEM_VERSION 10.0 (latest installed version))
endif()

project(NekoEngine C CXX)
cmake_minimum_required(VERSION 3.12)

set(CMAKE_C_STANDARD 17)
set(CMAKE_CXX_STANDARD 20)

option(USE_AVX2 "Enable AVX2 support" ON)
option(ENABLE_EDITOR "Enable building the editor" OFF)
option(ENABLE_AFTERMATH "Enable NVIDIA Aftermath support" OFF)

if(NOT CMAKE_BUILD_TYPE)
	set(CMAKE_BUILD_TYPE, Debug)
endif(NOT CMAKE_BUILD_TYPE)

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${PROJECT_SOURCE_DIR}/bin")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${PROJECT_SOURCE_DIR}/bin")
set(SDL2_DIR "$ENV{VULKAN_SDK}")

if(ENABLE_AFTERMATH)
	add_compile_definitions(ENABLE_AFTERMATH=1)
else(ENABLE_AFTERMATH)
	add_compile_definitions(ENABLE_AFTERMATH=0)
endif(ENABLE_AFTERMATH)

if(NOT MSVC)
	set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -g2 -D_DEBUG -Wall -Wno-switch -Wno-int-in-bool-context -Wno-missing-braces -O0")
	set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -DNDEBUG -g0 -Ofast -fomit-frame-pointer -Werror -Wno-switch -Wno-int-in-bool-context -Wno-missing-braces")
	set(CMAKE_C_FLAGS_RELWITHDEBINFO "${CMAKE_C_FLAGS_RELWITHDEBINFO} -g2 -Ofast -Wall -O0")

	if(NOT CMAKE_BUILD_TYPE EQUAL Release)
		set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -g2")
	endif()

	if(USE_AVX)
		add_compile_options(-mavx)
	endif()
	
	if(CMAKE_C_COMPILER_ID STREQUAL "Clang")
		add_compile_options(-Wno-enum-conversion)
		add_compile_options(-Wno-switch)
	else()
		add_compile_options(-march=native -mtune=native)
		add_compile_options(-Wno-format-truncation)
	endif()

	#add_compile_options(-fsanitize=thread)
	#add_link_options(-fsanitize=thread)
else()
	set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} /D_DEBUG /Zi /std:c17")
	set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} /DNDEBUG /GL /O2 /Od /Ox /std:c17")
	set(CMAKE_C_FLAGS_RELWITHDEBINFO "${CMAKE_C_FLAGS_RELWITHDEBINFO} /D_DEBUG /Z7 /GL /O2 /Ox /std:c17")

	set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /D_DEBUG /Zi /std:c++20")
	set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /nologo /DNDEBUG /GL /O2 /Od /Ox /std:c++20")
	set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO} /D_DEBUG /Z7 /GL /O2 /Ox /std:c++20")

	if(USE_AVX)
		add_compile_options(/arch:AVX2)
	endif()

	if(MSVC_VERSION LESS_EQUAL 1934)
		include_directories(Platform/Win32/Compat)
	else()
		add_compile_options(/experimental:c11atomics)
	endif()

	add_compile_options(/nologo)
	add_compile_options(/GS)
	add_compile_options(/wd4996)
	add_compile_options(/Zc:inline-)
	add_compile_options(/permissive-)
	add_compile_options(/Gm-)
	add_compile_options(/Zc:wchar_t)
	add_compile_definitions(_UNICODE)
	add_compile_definitions(UNICODE)
	add_compile_definitions(NOMINMAX)
	add_compile_definitions(_CRT_SECURE_NO_WARNINGS)
	add_compile_definitions(AL_LIBTYPE_STATIC)
	add_compile_definitions(_XM_NO_XMVECTOR_OVERLOADS_)
endif()

include_directories(Include)
include_directories(Deps)
include_directories(Deps/PhysFS)
include_directories(Deps/Lua)
include_directories($ENV{VULKAN_SDK}/include)

if(WIN32)
	include_directories(Deps/mojoAL)
	set(CMAKE_WIN32_EXECUTABLE ON)
else()
	include_directories(Deps/sal)
	include_directories(Deps/DXM/Inc)
	include_directories(Deps/DXM/Extensions)
	include_directories(Deps/DXM/XDSP)
	include_directories(Deps/DXM/SHMath)
	include_directories(Deps/DXM/Stereo3D)

	include_directories(/usr/local/include)
	include_directories(/usr/X11R6/include)
	include_directories(/opt/homebrew/include)

	link_directories(/usr/local/lib)
	link_directories(/usr/X11R6/lib)
	link_directories(/opt/homebrew/lib)
endif()

add_subdirectory(Tools/bin2c)
#add_subdirectory(Tools/nht)

add_subdirectory(Deps/PhysFS)
add_subdirectory(Deps/Lua)

if(WIN32)
	add_subdirectory(Deps/mojoAL)
endif()

if(ENABLE_EDITOR)
	add_compile_definitions(_NEKO_EDITOR_)
endif()

add_subdirectory(Engine)

if(WIN32)
	add_subdirectory(Platform/Win32)
elseif(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
	add_subdirectory(Platform/macOS)
else()
	add_subdirectory(Platform/UNIX)
endif()

add_subdirectory(Application)

if(ENABLE_EDITOR)
	add_subdirectory(Deps/meshoptimizer)
	add_subdirectory(Editor)
endif()

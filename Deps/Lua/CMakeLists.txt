cmake_minimum_required(VERSION 3.13)
project(lua C)

file (GLOB src *.c)

set(CMAKE_C_STANDARD 11)

if(NOT WIN32)
	if(NOT APPLE)
		add_definitions(-DLUA_USE_LINUX)
	else()
		add_definitions(-DLUA_USE_MACOSX)
	endif()
endif()

if(NOT MSVC)
	if(CMAKE_BUILD_TYPE STREQUAL Debug)
		add_compile_options(-g2 -Og -D_DEBUG -Wall)
		set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -g2")
	elseif(CMAKE_BUILD_TYPE STREQUAL "RelWithDebInfo")
		add_compile_options(-g2 -Ofast -DNDEBUG -Wall)
		set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -g2")
	elseif(CMAKE_BUILD_TYPE STREQUAL "Release")
		add_compile_options(-g0 -Ofast -DNDEBUG -Werror)
	endif()

	add_compile_options(-fPIC)

	if(CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64")
		add_compile_options(-mavx)
	endif()

	#if(CMAKE_C_COMPILER_ID STREQUAL "Clang" OR CMAKE_C_COMPILER_ID STREQUAL "AppleClang")
	#	add_compile_options(-Wno-enum-conversion)
	#else()
	#	if (NOT ${CMAKE_SYSTEM_PROCESSOR} STREQUAL "powerpc")
	#		add_compile_options(-march=native -mtune=native)
	#	endif()
	#endif()
else()
	if(CMAKE_BUILD_TYPE STREQUAL Debug)
		add_compile_options(/Zi /D_DEBUG)
		set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS}")
	elseif(CMAKE_BUILD_TYPE STREQUAL "RelWithDebInfo")
		add_compile_options(/Z7 /GL /O2 /Ob3 /Ot /fp:fast /DNDEBUG)
		set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS}")
	elseif(CMAKE_BUILD_TYPE STREQUAL "Release")
		add_compile_options(/GL /O2 /Ob3 /Oy /Ot /fp:fast /DNDEBUG)
	endif()

	if(CMAKE_SYSTEM_PROCESSOR STREQUAL AMD64)
		add_compile_options(/arch:AVX2)
	elseif(CMAKE_SYSTEM_PROCESSOR STREQUAL ARM64)
		add_compile_options(/arch:armv8.1)
	else()
		add_compile_options(/arch:sse)
	endif()
endif()

add_library(lua STATIC ${src})

include(GNUInstallDirs)
install(TARGETS lua)
